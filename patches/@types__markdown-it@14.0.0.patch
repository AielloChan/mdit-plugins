diff --git a/lib/parser_block.d.mts b/lib/parser_block.d.mts
index 74f002ef83281ced2155c9b06399af597b5df5f6..01be62697c8ba79e3eafcb62a11a86aa72189d49 100644
--- a/lib/parser_block.d.mts
+++ b/lib/parser_block.d.mts
@@ -3,27 +3,30 @@ import Ruler from "./ruler.mjs";
 import StateBlock from "./rules_block/state_block.mjs";
 import Token from "./token.mjs";
 
-declare namespace ParserBlock {
-    type RuleBlock = (state: StateBlock, startLine: number, endLine: number, silent: boolean) => boolean;
-}
+export type RuleBlock = (
+  state: StateBlock,
+  startLine: number,
+  endLine: number,
+  silent: boolean
+) => boolean;
 
 declare class ParserBlock {
-    /**
-     * [[Ruler]] instance. Keep configuration of block rules.
-     */
-    ruler: Ruler<ParserBlock.RuleBlock>;
+  /**
+   * [[Ruler]] instance. Keep configuration of block rules.
+   */
+  ruler: Ruler<RuleBlock>;
 
-    /**
-     * Generate tokens for input range
-     */
-    tokenize(state: StateBlock, startLine: number, endLine: number): void;
+  /**
+   * Generate tokens for input range
+   */
+  tokenize(state: StateBlock, startLine: number, endLine: number): void;
 
-    /**
-     * Process input string and push block tokens into `outTokens`
-     */
-    parse(str: string, md: MarkdownIt, env: any, outTokens: Token[]): void;
+  /**
+   * Process input string and push block tokens into `outTokens`
+   */
+  parse(str: string, md: MarkdownIt, env: any, outTokens: Token[]): void;
 
-    State: typeof StateBlock;
+  State: typeof StateBlock;
 }
 
 export default ParserBlock;
